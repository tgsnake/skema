name: Publish Package to NPM
on:
  repository_dispatch:
    types: [update_version]
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: |
          yarn config set enableImmutableInstalls false
          yarn install --frozen-lockfile
      - name: Update version
        run: |
          npm version minor --no-git-tag-version
      - name: Build package
        run: |
          yarn build
          yarn prettier
          npm pack
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  
      - name: Push changes
        run: |
          git config user.email github-actions[bot]@users.noreply.github.com
          git config user.name github-actions[bot]
          git add package.json
          git commit -m "chore: Bump version to $(node -p "require('./package.json').version")" || echo "No changes to commit"
          git push origin master || echo "No changes to push

      - name: Get version from package.json
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
    
      - name: Notify success
        run: echo "Package published successfully to NPM with version $(node -p "require('./package.json').version")"
        if: success()
    
      - name: Notify failure
        run: echo "Failed to publish package to NPM"
        if: failure()

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          generate_release_notes: true
          files: ./*.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      
      - name: Cleanup
        run: |
          rm -f *.tgz
          echo "Cleanup completed"
        if: always()
      - name: Final message
        run: echo "Workflow completed"
        if: always()
